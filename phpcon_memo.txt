

自社製品の品質を担保するために、PHPバージョンアップを2年に1回、バージョンを一つ飛ばしで上げるという取り組みを行っています。そのため、今年EOLを迎えるPHP7.3からPHP8.0へのバージョンアップの行いました。今回、対応した製品は2008年から続いてるレガシーシステムであることと、PHP8.0の変更点が多いことが重なり過去にないレベルの対応が必要となりました。

今回、PHP8.0の変更点で大きく影響したこととしては、型に関するチェックが厳しくなることと緩やかな比較の結果でした。
調査が難航した原因としては、コア部分のコードの引数や変数がmiexd型であるところが多く影響箇所の静的な調査ができなかったこと、

どんな対応か
・既存バージョンと同じ動作をするラップ関数の作成
・チェック関数を作成して埋め込み、テストを行い影響箇所を調査する

発生した問題
    緩やかな比較の影響調査
        ・型が明確でないためコード上からの判断が困難である
            ・呼び箇所の全ての調査
            ・コア部分のコードであるため、テストで実施するにもパターンが多すぎる
       
        ・使用箇所だけでも20000箇所以上存在する
        　→ 目視で確認はほぼ不可能

　　　　　・対応どうするか？
        　・全置換えするのか
　　　　　　・影響箇所だけ置き換えるのか

結論
・コード負債は返せるときに返そう
・型に対する意識は重要


情報
・近年のバージョンアップ対応の約3倍の工数がかかった
・コード負債が大きい
・E2Eテストである程度発見できた。
・ユニットテストが不足しているため動作影響があるかが調べられなかった。
・レガシーコードであるため
    ・共通関数の引数や返値がmixed
　　・一つの変数に2つ以上の意味を持つ
　　・intとstringが混ざってるのがよくなかった
　　・'' == 0 がやばい
　　→ 根本、フォームから来たパラメータを型変換していない
  
  
